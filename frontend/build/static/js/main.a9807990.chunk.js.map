{"version":3,"sources":["components/Post.js","components/Groups.js","components/Posts.js","App.js","actions/activeStateActions.js","serviceWorker.js","reducers/index.js","reducers/active_route.js","store/configureStore.js","index.js"],"names":["Post","this","props","setActiveRoute","location","pathname","React","Component","withRouter","Groups","state","groups","name","checked","fetch","then","response","json","setState","className","map","group","type","data-toggle","data-target","method","action","value","Posts","App","to","id","active_route","path","connect","store","console","log","dispatch","route","payload","Boolean","window","hostname","match","rootReducer","combineReducers","createStore","applyMiddleware","thunk","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9807990.chunk.js","sourcesContent":["import React from 'react';\nimport {withRouter} from 'react-router-dom';\n\nclass Post extends React.Component {\n\n    componentDidMount() {\n        this.props.setActiveRoute(this.props.location.pathname);\n    }\n\n    render() {\n        return(<h1>Новый пост</h1>)\n    }\n}\n\nexport default withRouter(Post);","import React from 'react';\nimport {withRouter} from 'react-router-dom';\nclass Groups extends React.Component {\n    state = {\n        groups:[{name:'Lol', checked:true}, {name:'Kek', checked:false}, {name:'Chebureck', checked:true}],\n    };\n\n    componentDidMount() {\n        this.props.setActiveRoute(this.props.location.pathname);\n        fetch('http://localhost:5000/groups').then(response => response.json()).then(groups => this.setState({groups:groups}));\n    }\n\n    render() {\n        return(\n            <div className=\"container\">\n                <h1>Список групп</h1>\n                {this.state.groups.map(group =>\n                    <div className=\"page\">\n                        <span className=\"group-name\">{group.name}</span>\n                        {group.checked?\n                            <span className=\"text-success\">• Группа подтвреждена</span>:\n                            <span className=\"text-warning\">• Группа непроверена</span>\n                        }\n                        {group.checked?\n                            <button type=\"button\" className=\"btn btn-outline-primary\" data-toggle=\"modal\"\n                                    data-target=\"#modal-{{group['id']}}\">Редактировать\n                            </button> :\n                           <form method=\"post\" className=\"button-form\" action=\"/check\">\n                            <input type=\"hidden\" name=\"group\" value=\"{{group['id']}}\"/>\n                            <button type=\"submit\" className=\"btn btn-outline-warning\">Проверить</button>\n                            </form>\n                        }\n\n                        <form method=\"post\" className=\"button-form\" action=\"/delete\">\n                            <input type=\"hidden\" name=\"group\" value=\"{{group['id']}}\"/>\n                                <button type=\"submit\" name=\"{{group}}\" className=\"btn btn-outline-danger\">Удалить\n                                </button>\n                        </form>\n                    </div>)}\n            </div>\n        )\n\n    }\n}\n\nexport default withRouter(Groups);","import React from 'react';\nimport {withRouter} from 'react-router-dom';\n\nclass Posts extends React.Component {\n\n    componentDidMount() {\n        this.props.setActiveRoute(this.props.location.pathname);\n    }\n\n    render() {\n        return(<h1>Список постов</h1>)\n    }\n}\n\nexport default withRouter(Posts);","import React from 'react';\nimport Post from \"./components/Post\";\nimport Groups from \"./components/Groups\";\nimport Posts from './components/Posts';\nimport {connect} from \"react-redux\";\nimport {setActiveRoute} from \"./actions/activeStateActions\";\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nclass App extends React.Component {\n  state = {\n  };\n  render() {\n    return(\n        <Router>\n          <div>\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n              <Link className=\"navbar-brand\" to=\"#\">Posting bot</Link>\n              <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <ul className=\"navbar-nav mr-auto\">\n                  <li className=\"nav-item\">\n                    <Link className={this.props.active_route === '/'? \"nav-link active\":\"nav-link \"}  to=\"/\">Новый пост</Link>\n                  </li>\n                  <li className=\"nav-item\">\n                    <Link className={this.props.active_route === '/groups'? \"nav-link active\":\"nav-link \"} to=\"/groups\">Группы</Link>\n                  </li>\n                  <li className=\"nav-item\">\n                    <Link className={this.props.active_route === '/posts'? \"nav-link active\":\"nav-link \"} to=\"/posts\">Опубликованные</Link>\n                  </li>\n                </ul>\n              </div>\n            </nav>\n\n            <Switch>\n              <Route path=\"/groups\">\n                <Groups setActiveRoute={this.props.setActiveRoute}/>\n              </Route>\n              <Route path=\"/posts\">\n                <Posts setActiveRoute={this.props.setActiveRoute}/>\n              </Route>\n              <Route path=\"/\">\n                <Post setActiveRoute={this.props.setActiveRoute}/>\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n    );\n  }\n\n}\nconst mapStateToProps = store => {\n  console.log(store);\n  return {\n    active_route:store.active_route\n  }\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    setActiveRoute:route  => dispatch(setActiveRoute(route)),\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export function setActiveRoute(route) {\n    return {\n        type: 'SET_ACTIVE_ROUTE',\n        payload: route,\n    }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux'\nimport {activeRouteReducer} from \"./active_route\"\n\nexport const rootReducer  =\n    combineReducers({\n        active_route:activeRouteReducer\n    });\n","export const initialState = '/';\n\nexport function activeRouteReducer(state=initialState, action) {\n    if(!action.payload)\n        return '/';\n    return action.payload;\n}","import { createStore, applyMiddleware } from 'redux'\nimport { rootReducer } from '../reducers'\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk'\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/configureStore\"\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}